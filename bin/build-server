#!/usr/bin/env python
import subprocess
import os
import json
import re
from pathlib import Path
from dotenv import load_dotenv
from github import Github
from pygit2 import Repository, Signature, Commit, UserPass, RemoteCallbacks, GIT_MERGE_ANALYSIS_UP_TO_DATE, GIT_MERGE_ANALYSIS_FASTFORWARD, GIT_MERGE_ANALYSIS_NORMAL
from build_server.build import build_packages, build_systems
from build_server.consts import *
from build_server.update import update_firefox_extensions

def get_working_commit(repo_name, current_sha):
    g = Github(os.getenv('GITHUB_TOKEN'))
    repo = g.get_repo(repo_name)
    commits = repo.get_commits(sha='master')
    for commit in commits[:20]:
        if commit.sha == current_sha:
            return current_sha
        elif commit.get_combined_status().state == 'success':
            return commit.sha

def pull_repo(dir):
    repo = Repository(dir)
    remote = repo.remotes['origin']
    remote.fetch()
    master_id = repo.lookup_reference('refs/remotes/origin/master').target
    merge_result, _ = repo.merge_analysis(master_id)

    if merge_result & GIT_MERGE_ANALYSIS_UP_TO_DATE:
        return
    elif merge_result & GIT_MERGE_ANALYSIS_FASTFORWARD:
        repo.checkout_tree(repo.get(master_id))
        master_ref = repo.lookup_reference('refs/heads/master')
        master_ref.set_target(master_id)
        repo.head.set_target(master_id)
    elif merge_result & GIT_MERGE_ANALYSIS_NORMAL:
        repo.merge(remote_master_id)
        assert repo.index.conflicts is None, 'Merge conflicts, please manually fix'
        author = Signature('Aamaruvi Yogamani', '38222826+Technical27@users.noreply.github.com')
        tree = repo.index.write_tree()
        commit = repo.create_commit('refs/heads/master', author, author, '[build-server]: Merge', tree, [repo.head.target, remote_master_id])
        repo.state_cleanup()

def commit_changes(file, dir):
    repo = Repository(dir)
    repo.index.add(file)
    repo.index.write()
    tree = repo.index.write_tree()
    author = Signature('Aamaruvi Yogamani', '38222826+Technical27@users.noreply.github.com')
    old_head = repo.head.peel(Commit).id
    repo.create_commit('refs/heads/master', author, author, f'[build-server]: update {file}', tree, [old_head])

def push_changes(dir):
    repo = Repository(dir)
    remote = repo.remotes['origin']
    creds = UserPass('Technical27', os.getenv('GITHUB_TOKEN'))
    callback = RemoteCallbacks(credentials=creds)
    remote.connect(callbacks=callback)
    remote.push(['refs/heads/master:refs/heads/master'], callbacks=callback)

def update_package(repo, src_file, pkg_name):
    with src_file.open('r') as pkg_file:
        current_commit = json.load(pkg_file)['rev']

    latest_commit = get_working_commit(repo, current_commit)
    if latest_commit == current_commit:
        return

    with src_file.open('w') as pkg_file:
        json.dump({ 'rev': latest_commit, 'sha256': FAKE_HASH }, pkg_file)

    build = subprocess.run(['nix', 'build', '--no-link', f'{PKGS_DIR}#{pkg_name}'], capture_output=True)
    match = HASH_RE.search(build.stderr.decode('utf-8'))
    sha256 = match.group(1)

    with src_file.open('w') as pkg_file:
        json.dump({ 'rev': latest_commit, 'sha256': sha256 }, pkg_file)

    print(f'updated {pkg_name} to {commit}')
    try:
        subprocess.run(['nix', 'build', '--no-link', f'{PKGS_DIR}#{pkg_name}'], check=True)
        commit_changes(src_file.name, PKGS_DIR)
        push_changes(PKGS_DIR)
    except subprocess.CalledProcessError:
        print(f'{pkg_name} failed to build')

def update_nvim():
    update_package('neovim/neovim', NVIM_JSON_PATH, 'neovim-unwrapped')

def update_libusb():
    update_package('libusb/libusb', LIBUSB_JSON_PATH, 'libusb-patched')

def main():
    load_dotenv(dotenv_path=Path('./.env'))

    if not GC_DIR.exists():
        GC_DIR.mkdir()

    pull_repo(PKGS_DIR)
    update_nvim()
    update_libusb()
    update_firefox_extensions()
    build_packages()

    pull_repo(CFG_DIR)
    build_systems()

if __name__ == '__main__':
    main()
